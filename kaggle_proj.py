# -*- coding: utf-8 -*-
"""Kaggle_Proj.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/188d2jq3nqA4TnFW9fJwxFXohhoRVa_pm

Import data
"""

import numpy as np
import pandas as pd
import tensorflow as tf

# Import Data
training_data = pd.read_csv('training.csv')
testing_data = pd.read_csv('test.csv')

X_train = training_data.iloc[:,2:].values

y_train = training_data.loc[:,'Y'].values

Ids = testing_data.loc[:, 'Id'].values
Ids = Ids.astype(dtype=np.int32)
X_Val = testing_data.iloc[:, 1:].values

# Split data into localized training and testing sample sets
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)

# Standardize data
from sklearn.preprocessing import StandardScaler

sc = StandardScaler()
np.shape(X_train)

X_train = sc.fit_transform(X_train)
X_Val = sc.transform(X_Val)

# Build Artifical Neural Network for Regression
from tensorflow.keras import layers
from tensorflow.keras.models import Sequential

# Attempt different amount sof neuron, hidden layers,and activation functions
ANN = Sequential ([
    layers.Dense(1, activation='sigmoid'),
    layers.Dense(5, activation='sigmoid'),
    #layers.Dropout(0.2),
    layers.Dense(1)
])

# Complie ANN using MSE as loss and stocastic gradient descent for optimization
ANN.compile(loss='mse', optimizer='sgd', metrics=['mse'])

# fit data to training set (sample or full)
history = ANN.fit(X_train, y_train, batch_size=32, epochs=100)

# make a prediction from sample testing data and find approx. test MSE
preds = ANN.predict(X_test)
mse = ((y_test - preds)**2).mean(axis=None)
print(mse)

# Make final predictions and write to csv
import csv
preds = ANN.predict(X_Val)
res = np.column_stack((Ids, preds))
pd.DataFrame(res)
print(preds.dtype)

# name a csv file for submission
filename = "sub1.csv"
fields = ["Id", "pred"]

# writing to csv file 
with open(filename, 'w') as csvfile: 
    # creating a csv writer object 
    csvwriter = csv.writer(csvfile) 
        
    # writing the fields 
    csvwriter.writerow(fields) 
        
    # writing the data rows 
    csvwriter.writerows(res)
